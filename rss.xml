<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Fabio Utzig</title><link>https://fabioutzig.com/</link><description>A blog by Fabio Utzig</description><atom:link href="https://fabioutzig.com/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Tue, 19 Jul 2016 00:36:33 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Solving Lattice Path</title><link>https://fabioutzig.com/posts/solving-lattice-path/</link><dc:creator>Fabio Utzig</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;SPOILER&lt;/strong&gt;: if you want to or are working on the exercises from
&lt;a class="reference external" href="http://projecteuler.net/"&gt;Project Euler&lt;/a&gt;, you should stop reading now!&lt;/p&gt;
&lt;p&gt;According to Wikipedia, &lt;a class="reference external" href="http://projecteuler.net/"&gt;Project Euler&lt;/a&gt; is a website dedicated to a
series of computational problems intended to be solved with computer programs
&lt;a class="footnote-reference" href="https://fabioutzig.com/posts/solving-lattice-path/#id2" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://fabioutzig.com/posts/solving-lattice-path/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Project_Euler"&gt;http://en.wikipedia.org/wiki/Project_Euler&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The problems are mostly math related and one main characteristic of most problems
is that they are usually hard to solve through brute force because they usually
have polynomial/exponential complexity and questions always ask for very large input
or number of inputs.&lt;/p&gt;
&lt;p&gt;Problem 15, Lattice Paths, is one that I found really interesting because it's
a geometric problem and with an intuitive solution. Let me copy here the text from
the problem.&lt;/p&gt;
&lt;blockquote&gt;
Starting in the top left corner of a 2×2 grid, and only being able to move to the
right and down, there are exactly 6 routes to the bottom right corner.&lt;/blockquote&gt;
&lt;img alt="/images/lattice_path.png" src="https://fabioutzig.com/images/lattice_path.png"&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
How many such routes are there through a 20×20 grid?&lt;/blockquote&gt;
&lt;p&gt;So my first reaction was: &lt;em&gt;I'll just do a brute force algorithm and see what happens!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I wrote an algorithm that uses recursion to find all possible paths. This is how it
ended up:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-1"&gt; 1&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-2"&gt; 2&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-3"&gt; 3&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-4"&gt; 4&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-5"&gt; 5&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-6"&gt; 6&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-7"&gt; 7&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-8"&gt; 8&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-9"&gt; 9&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-10"&gt;10&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-11"&gt;11&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-12"&gt;12&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-13"&gt;13&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-14"&gt;14&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-15"&gt;15&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-16"&gt;16&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-17"&gt;17&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-18"&gt;18&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-19"&gt;19&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-20"&gt;20&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_8c0f4c15eb474a79bee726de105420e8-21"&gt;21&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code ruby"&gt;&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-1"&gt;&lt;/a&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LatticePath&lt;/span&gt;
&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-2"&gt;&lt;/a&gt;   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-3"&gt;&lt;/a&gt;     &lt;span class="vi"&gt;@size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;
&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-4"&gt;&lt;/a&gt;   &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-6"&gt;&lt;/a&gt;   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;total&lt;/span&gt;
&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-7"&gt;&lt;/a&gt;     &lt;span class="n"&gt;moves&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-8"&gt;&lt;/a&gt;   &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-10"&gt;&lt;/a&gt;   &lt;span class="kp"&gt;private&lt;/span&gt;
&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-12"&gt;&lt;/a&gt;   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;moves&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-13"&gt;&lt;/a&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="vi"&gt;@size&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="vi"&gt;@size&lt;/span&gt;
&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-14"&gt;&lt;/a&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="vi"&gt;@size&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="vi"&gt;@size&lt;/span&gt;
&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-15"&gt;&lt;/a&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;moves&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;moves&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-16"&gt;&lt;/a&gt;   &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-17"&gt;&lt;/a&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-19"&gt;&lt;/a&gt; &lt;span class="n"&gt;sides&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="c1"&gt;# default value if none specified&lt;/span&gt;
&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-20"&gt;&lt;/a&gt; &lt;span class="n"&gt;lattice_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;LatticePath&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sides&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8c0f4c15eb474a79bee726de105420e8-21"&gt;&lt;/a&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;lattice_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Well, how bad could it be? Turn outs very bad.&lt;/p&gt;
&lt;p&gt;Running this for less than 13 sides was OK. Running this for 14 sides was
enough to take quite some time. Running for more than 14, it just takes too
long. I suppose it would take years for 20 sides. It obviously explodes in
complexity very quickly.&lt;/p&gt;
&lt;p&gt;Looking up for ways to solve this or similar problems, I ended up watching this
video from &lt;a class="reference external" href="https://www.khanacademy.org/"&gt;Khan Academy&lt;/a&gt; where Salman basically gives it away!&lt;/p&gt;
&lt;div class="section" id="path-counting-brain-teaser"&gt;
&lt;h2&gt;Path Counting Brain Teaser&lt;/h2&gt;
&lt;iframe width="560" height="420" src="https://www.youtube.com/embed/9QduzzW10uA?color=white&amp;amp;theme=light"&gt;
&lt;/iframe&gt;&lt;p&gt;I will not try to re-explain what's in the video so you should watch it first.
I'll follow from where the video ends, and will develop an algorithm that only
requires an array of size equal to one _side_ of the matrix to solve this problem.&lt;/p&gt;
&lt;p&gt;Basically after filling in values for each cell, what we get is an matrix like
this:&lt;/p&gt;
&lt;img alt="/images/full_grid.png" src="https://fabioutzig.com/images/full_grid.png"&gt;
&lt;p&gt;And looking more carefully, we can see that this matrix is symmetric. The coloring
I used on the pictures should make that clear. We are interested in the value on
the main diagonal so we can remove everything below it.&lt;/p&gt;
&lt;img alt="/images/half_grid.png" src="https://fabioutzig.com/images/half_grid.png"&gt;
&lt;p&gt;The next step was to recognize that each cell depends only on the cell to the left
and above it. The element in the diagonal is always the element above it multiplied
by 2 and the other elements in that row are the sum of the element in the cell to
the left with the element in the cell above them. The picture below should make
it clearer.&lt;/p&gt;
&lt;img alt="/images/grid_formula.png" src="https://fabioutzig.com/images/grid_formula.png"&gt;
&lt;p&gt;Now even more interesting is observing that every element only depends on the
elements exactly above them and once a new row is calculated from the row above
it, the former is not necessary anymore. So in the end the whole problem can be
solved by a simple array of size equal to the number of cell on one side of the
square matrix!&lt;/p&gt;
&lt;p&gt;And here's my optimized solution to the problem:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_ba4127145559491f8697a6f3f292eb0d-1"&gt; 1&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_ba4127145559491f8697a6f3f292eb0d-2"&gt; 2&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_ba4127145559491f8697a6f3f292eb0d-3"&gt; 3&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_ba4127145559491f8697a6f3f292eb0d-4"&gt; 4&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_ba4127145559491f8697a6f3f292eb0d-5"&gt; 5&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_ba4127145559491f8697a6f3f292eb0d-6"&gt; 6&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_ba4127145559491f8697a6f3f292eb0d-7"&gt; 7&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_ba4127145559491f8697a6f3f292eb0d-8"&gt; 8&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_ba4127145559491f8697a6f3f292eb0d-9"&gt; 9&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_ba4127145559491f8697a6f3f292eb0d-10"&gt;10&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_ba4127145559491f8697a6f3f292eb0d-11"&gt;11&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_ba4127145559491f8697a6f3f292eb0d-12"&gt;12&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_ba4127145559491f8697a6f3f292eb0d-13"&gt;13&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_ba4127145559491f8697a6f3f292eb0d-14"&gt;14&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_ba4127145559491f8697a6f3f292eb0d-15"&gt;15&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_ba4127145559491f8697a6f3f292eb0d-16"&gt;16&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/solving-lattice-path/#rest_code_ba4127145559491f8697a6f3f292eb0d-17"&gt;17&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code ruby"&gt;&lt;a name="rest_code_ba4127145559491f8697a6f3f292eb0d-1"&gt;&lt;/a&gt; &lt;span class="c1"&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;a name="rest_code_ba4127145559491f8697a6f3f292eb0d-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_ba4127145559491f8697a6f3f292eb0d-3"&gt;&lt;/a&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lattice_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sides&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ba4127145559491f8697a6f3f292eb0d-4"&gt;&lt;/a&gt;   &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sides&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_ba4127145559491f8697a6f3f292eb0d-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_ba4127145559491f8697a6f3f292eb0d-6"&gt;&lt;/a&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sides&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;a name="rest_code_ba4127145559491f8697a6f3f292eb0d-7"&gt;&lt;/a&gt;     &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;a name="rest_code_ba4127145559491f8697a6f3f292eb0d-8"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sides&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;a name="rest_code_ba4127145559491f8697a6f3f292eb0d-9"&gt;&lt;/a&gt;       &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;a name="rest_code_ba4127145559491f8697a6f3f292eb0d-10"&gt;&lt;/a&gt;     &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_ba4127145559491f8697a6f3f292eb0d-11"&gt;&lt;/a&gt;   &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_ba4127145559491f8697a6f3f292eb0d-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_ba4127145559491f8697a6f3f292eb0d-13"&gt;&lt;/a&gt;   &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sides&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;a name="rest_code_ba4127145559491f8697a6f3f292eb0d-14"&gt;&lt;/a&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_ba4127145559491f8697a6f3f292eb0d-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_ba4127145559491f8697a6f3f292eb0d-16"&gt;&lt;/a&gt; &lt;span class="n"&gt;sides&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="c1"&gt;# default value if none specified&lt;/span&gt;
&lt;a name="rest_code_ba4127145559491f8697a6f3f292eb0d-17"&gt;&lt;/a&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;lattice_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sides&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Have fun!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>math</category><category>project-euler</category><category>puzzle</category><guid>https://fabioutzig.com/posts/solving-lattice-path/</guid><pubDate>Wed, 11 Jun 2014 03:00:00 GMT</pubDate></item><item><title>Table-driven state machines</title><link>https://fabioutzig.com/posts/table-driven-state-machines/</link><dc:creator>Fabio Utzig</dc:creator><description>&lt;div&gt;&lt;p&gt;Some weeks ago I was writing a protocol stack for a serial RFID reader for
a commercial project I'm working on. Apart from one command, all the others
are standard serial communication where you send a fixed data structure and
receive a fixed data structure. But there's this command that does inventory,
which means, get all the RFID &lt;em&gt;tags&lt;/em&gt; in the area. You request the data and it
starts sending many different packets for each &lt;em&gt;tag&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The response format and size can vary but it always starts with a fixed
header which can be "RITM", "BITM", "EITM" or "IITM". So I basically wrote
a state machine do wait for one of these possible headers to start reading
the remaining data (size depends on the header type).&lt;/p&gt;
&lt;p&gt;To make it easier I draw the following flowchart:&lt;/p&gt;
&lt;img alt="/images/rfid_header_sm.jpg" src="https://fabioutzig.com/images/rfid_header_sm.jpg"&gt;
&lt;p&gt;I guess not many people will be impressed by my great drawing skills! Btw,
if anyone can suggest me a good flow charting software for free or low-cost
I'd be thankful.&lt;/p&gt;
&lt;p&gt;The only missing edges on this diagram are the ones that connect
all states back to state &lt;em&gt;S0&lt;/em&gt; when an invalid character is received.&lt;/p&gt;
&lt;div class="section" id="rudimentary-state-machine-code"&gt;
&lt;h2&gt;Rudimentary state machine code&lt;/h2&gt;
&lt;p&gt;The code I initially wrote to solve the problem is shown below:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-1"&gt;&lt;/a&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-2"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-3"&gt;&lt;/a&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-4"&gt;&lt;/a&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-6"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define S0 0&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-7"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define S1 1&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-8"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define S2 2&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-9"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define S3 3&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-10"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define S4 4&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-12"&gt;&lt;/a&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-13"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-16"&gt;&lt;/a&gt;    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-17"&gt;&lt;/a&gt;        &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serial_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-18"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-20"&gt;&lt;/a&gt;        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-21"&gt;&lt;/a&gt;        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-22"&gt;&lt;/a&gt;            &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-23"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isvalid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-24"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-25"&gt;&lt;/a&gt;                &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-26"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-27"&gt;&lt;/a&gt;                &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-28"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-29"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-30"&gt;&lt;/a&gt;        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-31"&gt;&lt;/a&gt;            &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-32"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'I'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-33"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-34"&gt;&lt;/a&gt;                &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-35"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isvalid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-36"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-37"&gt;&lt;/a&gt;                &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-38"&gt;&lt;/a&gt;                &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-39"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-40"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-41"&gt;&lt;/a&gt;                &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-42"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-43"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-44"&gt;&lt;/a&gt;        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-45"&gt;&lt;/a&gt;            &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-46"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'T'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-47"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-48"&gt;&lt;/a&gt;                &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-49"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isvalid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-50"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-51"&gt;&lt;/a&gt;                &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-52"&gt;&lt;/a&gt;                &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-53"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-54"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-55"&gt;&lt;/a&gt;                &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-56"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-57"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-58"&gt;&lt;/a&gt;        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-59"&gt;&lt;/a&gt;            &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-60"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'M'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-61"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-62"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isvalid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-63"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-64"&gt;&lt;/a&gt;                &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-65"&gt;&lt;/a&gt;                &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-66"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-67"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-68"&gt;&lt;/a&gt;                &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-69"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-70"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-71"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-72"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-73"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The function &lt;em&gt;isvalid&lt;/em&gt; tests if the character received is a valid
starting character for the header strings know.&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_ea8297b0b12a4e21ba904a7ddbbd694e-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="nf"&gt;isvalid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ea8297b0b12a4e21ba904a7ddbbd694e-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ea8297b0b12a4e21ba904a7ddbbd694e-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'R'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'B'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'E'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'I'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_ea8297b0b12a4e21ba904a7ddbbd694e-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;It worked as expect but it should be clear that it's messy and has a spaghetti
structure which could quickly grow into unmaintainable code. The problem
is having a &lt;em&gt;case&lt;/em&gt; for each state and inside it a nested if/elseif test for
the received character.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="towards-a-better-state-machine-structure"&gt;
&lt;h2&gt;Towards a better state machine structure&lt;/h2&gt;
&lt;p&gt;While reading &lt;a href="http://www.amazon.com/dp/1556220782/?tag=utzig-20" target="_blank"&gt;Programming Game AI by Example&lt;/a&gt; (great book!)
I stumbled across some designs for state machines and in particular one
table-driven which doesn't require object orientation and polymorphism. Although
the book only gives a rough example, it is clear enough. I previously saw a very
similar approach used in lexers where a given input regular expression generates
a table-driven state machine.&lt;/p&gt;
&lt;p&gt;To get started the first thing I did was to define a &lt;em&gt;struct&lt;/em&gt; to accomodate the
necessary data. Here's how it looks:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_1adef2a098024339aea1e7a562ec4495-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;
&lt;a name="rest_code_1adef2a098024339aea1e7a562ec4495-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_1adef2a098024339aea1e7a562ec4495-3"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;int8_t&lt;/span&gt; &lt;span class="n"&gt;cur_state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_1adef2a098024339aea1e7a562ec4495-4"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_1adef2a098024339aea1e7a562ec4495-5"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;int8_t&lt;/span&gt; &lt;span class="n"&gt;next_state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_1adef2a098024339aea1e7a562ec4495-6"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_1adef2a098024339aea1e7a562ec4495-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;transition_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Basically to decide the new state what is used is a current state and the last
character received. But using the last character directly has many drawbacks
so I decided to use a function (&lt;em&gt;valid&lt;/em&gt;) to decide the next state. The &lt;em&gt;index&lt;/em&gt;
variable is custom data I need to get the position where the character will
be inserted in the input buffer. This is not really part of the state machine.&lt;/p&gt;
&lt;p&gt;Here's what the declaration of the final state machine looks like:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define S0 0&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define S1 1&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-3"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define S2 2&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-4"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define S3 3&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-5"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define S4 4&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;transition_t&lt;/span&gt; &lt;span class="n"&gt;trs&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-8"&gt;&lt;/a&gt;    &lt;span class="cm"&gt;/* STATE 0 */&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-9"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="n"&gt;initial_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-10"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="n"&gt;_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-11"&gt;&lt;/a&gt;    &lt;span class="cm"&gt;/* STATE 1 */&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-12"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;         &lt;span class="n"&gt;I_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-13"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="n"&gt;initial_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-14"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="n"&gt;_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-15"&gt;&lt;/a&gt;    &lt;span class="cm"&gt;/* STATE 2 */&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-16"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;         &lt;span class="n"&gt;T_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-17"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="n"&gt;initial_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-18"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;         &lt;span class="n"&gt;_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-19"&gt;&lt;/a&gt;    &lt;span class="cm"&gt;/* STATE 3 */&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-20"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;         &lt;span class="n"&gt;M_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-21"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="n"&gt;initial_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-22"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;         &lt;span class="n"&gt;_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-23"&gt;&lt;/a&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-25"&gt;&lt;/a&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;trs_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The element in the second column is a function which will evaluate if this is
the valid row. For example, when in state &lt;em&gt;S1&lt;/em&gt; if &lt;em&gt;I_char&lt;/em&gt; returns
&lt;em&gt;true&lt;/em&gt; (by &lt;em&gt;C's&lt;/em&gt; definition) then it goes to state &lt;em&gt;S2&lt;/em&gt;. Else if
&lt;em&gt;initial_char&lt;/em&gt; returns &lt;em&gt;true&lt;/em&gt; it stays in state &lt;em&gt;S1&lt;/em&gt;. The function &lt;em&gt;_true&lt;/em&gt;
always returns a &lt;em&gt;true&lt;/em&gt; value.&lt;/p&gt;
&lt;p&gt;The order of the row declarations is important because they are tested
from the starting row towards the ending row.&lt;/p&gt;
&lt;p&gt;The variable &lt;em&gt;trs_size&lt;/em&gt; is the number of elements in the state machine
description used in the main algorithm to iterate over all elements.&lt;/p&gt;
&lt;p&gt;These are the definitions of the fuctions used in the declaration of the
state machine:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_15f7caa827cb41e5843291d074912867-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="nf"&gt;initial_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_15f7caa827cb41e5843291d074912867-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_15f7caa827cb41e5843291d074912867-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;'R'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;'B'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;'E'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;'I'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_15f7caa827cb41e5843291d074912867-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_15f7caa827cb41e5843291d074912867-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="nf"&gt;I_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'I'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_15f7caa827cb41e5843291d074912867-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="nf"&gt;T_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'T'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_15f7caa827cb41e5843291d074912867-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="nf"&gt;M_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'M'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_15f7caa827cb41e5843291d074912867-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="nf"&gt;_true&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The function &lt;em&gt;initial_char&lt;/em&gt; returns &lt;em&gt;true&lt;/em&gt; if any of the characters
valid to initiate a header is found. There is also one function for each of
the extra possible characters. &lt;em&gt;_true&lt;/em&gt; always returns &lt;em&gt;1&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And here is the final state machine code!&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-1"&gt;&lt;/a&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serial_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;trs_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;trs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;cur_state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-8"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-9"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;trs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;next_state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-10"&gt;&lt;/a&gt;                &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;trs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-11"&gt;&lt;/a&gt;                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-12"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-13"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-14"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-15"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;In the end the code is actually bigger and probably less efficient. But
it should be a lot easier to maintain. If I copy/paste it on another
project I will only need to modify the state machine array declaration
(and probably also the custom data).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="things-that-could-be-made-better"&gt;
&lt;h2&gt;Things that could be made better&lt;/h2&gt;
&lt;p&gt;The is (at least) one thing which could be made better in the newer code.
Look at these function definitions below:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_c1e127cf270d449fbd1380ad33a96b9a-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="nf"&gt;I_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'I'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_c1e127cf270d449fbd1380ad33a96b9a-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="nf"&gt;T_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'T'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_c1e127cf270d449fbd1380ad33a96b9a-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="nf"&gt;M_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'M'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;As it must be quite obvious, they all look pretty much the same. Only the
character tested changes. There should be a way of fixing this with
preprocessor macros. I have in mind something like this:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_92942ce6a3754489844125c691c9b8d2-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define CHAR_FUN(c) static uint8_t c##_char(char ch) { return (ch == '##c##'); }&lt;/span&gt;
&lt;a name="rest_code_92942ce6a3754489844125c691c9b8d2-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_92942ce6a3754489844125c691c9b8d2-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;CHAR_FUN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_92942ce6a3754489844125c691c9b8d2-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;CHAR_FUN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_92942ce6a3754489844125c691c9b8d2-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;CHAR_FUN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The problem in this code is that &lt;em&gt;preprocessor's&lt;/em&gt; concatenation doesn't work
inside single quotes. So it generates the correct function name but the test
will look like &lt;em&gt;ch == '##c##'&lt;/em&gt; instead of the correct character.&lt;/p&gt;
&lt;p&gt;I'm not sure yet of how to do it but I'll keep trying!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update-22-jun-2013"&gt;
&lt;h2&gt;UPDATE (22 Jun 2013)&lt;/h2&gt;
&lt;p&gt;I just found a way of solving the problem above using &lt;em&gt;stringification&lt;/em&gt; as
provided by the preprocessor. Not great but it does the job.&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_2172a71360a842e3b4dd4fd0e0e0120a-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define CHAR_FUN(c) static uint8_t c##_char(char ch){char *s=#c;return(ch==s[0]);}&lt;/span&gt;
&lt;a name="rest_code_2172a71360a842e3b4dd4fd0e0e0120a-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;CHAR_FUN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_2172a71360a842e3b4dd4fd0e0e0120a-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;CHAR_FUN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_2172a71360a842e3b4dd4fd0e0e0120a-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;CHAR_FUN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>c</category><category>programming</category><guid>https://fabioutzig.com/posts/table-driven-state-machines/</guid><pubDate>Fri, 21 Jun 2013 03:00:00 GMT</pubDate></item><item><title>Back to guitar playing</title><link>https://fabioutzig.com/posts/back-to-guitar-playing/</link><dc:creator>Fabio Utzig</dc:creator><description>&lt;div&gt;&lt;p&gt;I've been practicing some guitar playing on the last few weeks. Maybe
a little longer than a few weeks! Anyway, after a lot of work and music
listening, which is mostly jazz and fusion these days, I'm getting somewhat
better at learning songs by ear. There's a song by the band Ohm:, the
band of the great guitar player Chris Poland, that I really love and made
a quick and dirty cover this afternoon. You can watch it here:&lt;/p&gt;
&lt;iframe width="640" height="360" frameborder="0" allowfullscreen src="https://www.youtube.com/embed/0_Y8yp55uzs?rel=0"&gt;
&lt;/iframe&gt;&lt;p&gt;I feel quite proud of learning the whole song by ear, without any kind of
tablature and transcription help.&lt;/p&gt;
&lt;p&gt;And the next post, hopefully, will be about programming! :)&lt;/p&gt;&lt;/div&gt;</description><category>guitar</category><guid>https://fabioutzig.com/posts/back-to-guitar-playing/</guid><pubDate>Sun, 16 Jun 2013 03:00:00 GMT</pubDate></item><item><title>Fixing the serial port of my Nexys2</title><link>https://fabioutzig.com/posts/fixing-the-serial-port-of-my-nexys2/</link><dc:creator>Fabio Utzig</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm writing this post because today I &lt;em&gt;fixed&lt;/em&gt; the serial port of my Nexys2
board. This will mainly highlight how we can get trapped in some way of
thinking when we're pretty sure about something and not contemplate a whole
spectrum of options surrounding it. It will be somewhat shameful I guess,
but let's see if you can find the solution more easily than I did!&lt;/p&gt;
&lt;p&gt;A month ago or so I was working on learning Verilog and was writing some code.
I got to a point where I wanted to test a softcore and I needed to upload code
through the serial port. While getting there, I made a &lt;em&gt;port&lt;/em&gt; of the lattice
mico32 softcore to my board. Actually the hard work was already done and I only
had to make some very small adaptations. I used the code from this repo:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/optixx/lm32"&gt;https://github.com/optixx/lm32&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The problem was that it booted, sent a prompt throught the serial port but I
could not input commands. If you look at the code at &lt;em&gt;firmware/boot0-serial/main.c&lt;/em&gt;
you'll see that what it does is this:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_ffbba2ec7be54995a409bcea3fbc5ea5-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;uart_putstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"**soc-lm32/bootloader** &amp;gt; &lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_ffbba2ec7be54995a409bcea3fbc5ea5-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uart_getchar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I'm omitting the irrelevant code. So I got the prompt but no data that I sent from
the computer ever got in to the Nexys2.
Since the lm32 is a quite complex softcore I thought that maybe it had
some problems and ended up testing other UART cores. Actually I ended up writing
my own which is at this repo (in the directory &lt;em&gt;uart&lt;/em&gt;):&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/utzig/nexys2-verilog-samples"&gt;https://github.com/utzig/nexys2-verilog-samples&lt;/a&gt; (btw, this is not good code!)&lt;/p&gt;
&lt;p&gt;The results were the same. It worked in the transmit direction only.&lt;/p&gt;
&lt;p&gt;The schematics for the Nexys2 UART converter is this:&lt;/p&gt;
&lt;img alt="/images/nexys2_uart.png" src="https://fabioutzig.com/images/nexys2_uart.png"&gt;
&lt;p&gt;I put an oscilloscope on the RX signal and tried to find out what was
happening. So here's how a RS232 UART works. The TX/RX lines are usually
in high level. When you send data,
the first thing it does is to send the &lt;em&gt;START&lt;/em&gt; bit. A &lt;em&gt;START&lt;/em&gt; bit is
characterized by a transition from high to low level. The data bits go next
and at last the &lt;em&gt;STOP&lt;/em&gt; bit (or bits). What was happening here was that the
RX line would go
to low level and stay that way. It would never go back to high level. No data
was going through. To get it back to working state I had to disconnect/reconnect.&lt;/p&gt;
&lt;p&gt;I started suspecting my the issue was with my USB &amp;lt;-&amp;gt; RS232 adapter. I got
another board (an ARM CM3 powered devboard) and wrote some code for doing
serial communications. This ended up working and I got data in and out. So
it was clear the problem was not with my serial adapter. Btw, here are the
schematics of the board I used to do the test (Olimex STM32-P103):&lt;/p&gt;
&lt;img alt="/images/stm32-p103-uart.png" src="https://fabioutzig.com/images/stm32-p103-uart.png"&gt;
&lt;p&gt;The conclusion then was that the problem was either with the pin used for RX on
my FPGA or with the onboard TTL &amp;lt;-&amp;gt; RS232 converter. So I ended up buying some extra
converters to test it. And these things are not easy to get here in Brazil.
But I found them at &lt;a class="reference external" href="http://www.multcomercial.com.br"&gt;Multcomercial&lt;/a&gt;. They arrived yesterday and this morning I
removed the old ST3232 and put a new MAX3232 chip. You can see the final result
below:&lt;/p&gt;
&lt;img alt="/images/max3232.jpg" src="https://fabioutzig.com/images/max3232.jpg"&gt;
&lt;p&gt;As you can see I ended up destroying one onboard wire and had to fix with normal
wire. When I turned it on, data came out and when I sent data nothing came in.
Shit!!!&lt;/p&gt;
&lt;p&gt;So, the problem must be with the FPGA pin, right? Actually no, it isn't.&lt;/p&gt;
&lt;p&gt;Let's look harder at schematics! There are some difference between the two boards.
The STM32 has the main lines (RX/TX/GND) connected in the standard way but
it has also the CTS/RTS lines connected to the converter and has a resistor
between DTR and DSR. The Nexys2 has the RX/TX/GND lines connected the same
way but RTS is connected to CTS (no connection to the converter) and
DSR/DTR/DCD are all connected together. Interesting, right?.&lt;/p&gt;
&lt;p&gt;I got a spare serial cable, soldered the 3 pins which matter (RX/TX/GND),
tried again and voilá... data out and data in.&lt;/p&gt;
&lt;p&gt;Sometimes we get stuck with knowing for sure that we know what's happening
but turns out we don't (at least it applies to me!).&lt;/p&gt;&lt;/div&gt;</description><category>fpga</category><category>verilog</category><guid>https://fabioutzig.com/posts/fixing-the-serial-port-of-my-nexys2/</guid><pubDate>Sat, 18 May 2013 03:00:00 GMT</pubDate></item><item><title>Cheap Chinese SSDs</title><link>https://fabioutzig.com/posts/cheap-chinese-ssds/</link><dc:creator>Fabio Utzig</dc:creator><description>&lt;div&gt;&lt;p&gt;Since I bought a Netbook last year, I wasn't very happy with it's HDD. The reason
was that I had to disable the power management or at least configure it to not
allow the spin down of the drive.&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_6949ae451de94d9785b224b3f48841c5-1"&gt;&lt;/a&gt;$ sudo hdparm -B &lt;span class="m"&gt;255&lt;/span&gt; /dev/sda
&lt;/pre&gt;&lt;p&gt;The problem was so annoying that I could not even edit a text file on Vim without
the disc spinning down constantly and hanging text entry for some seconds. Disabling
power management was effective to solve the problem but then the battery would
discharge faster. Also since the Netbook is so small and light, using it at any
surface that is not very flat and stable causes slight movements which could
damage the drive. It all bored me.&lt;/p&gt;
&lt;p&gt;So I wanted to install a SSD because it would solve all problems. No more
disc spinning down, no need to disable power management and no requirement
of having a stable surface to use it. The problem was the price. A SSD drive
purchased here in Brazil would end up costing more that the Netbook itself!&lt;/p&gt;
&lt;p&gt;I did some research and ended up buying a cheap chinese SSD on Aliexpress. The link
to the seller/product I purchased follows:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.aliexpress.com/item/2-5-Inch-SATA-II-SSD-32GB-4-Channel-Solid-State-Disk-MLC-For-Notebook-computer/571854249.html"&gt;Kingspec 2.5 SATA 32GB&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After almost two months I'm happy so far. I was afraid it would end up giving
some problem after some use but until now is like it was on first day. The system
boots in something like 3 seconds (after BIOS). Everything got boosted up.
The main problem is the size which prevents the use of some software. But I could
build a Linux distro based on buildroot for a project I'm working on, I built
cross toolchains for ARM/AVR/MSP430 and build llvm (which took 8 hours!!!). It suits
me well since I can do the things I do day to day.&lt;/p&gt;
&lt;p&gt;When I bought it in January it cost me US$ 43. Now it's selling for US$ 39. I wonder
how low this price will get in the next 3 months, 1 year. Even being a very simple
SSD, lacking &lt;em&gt;important&lt;/em&gt; features like TRIM, still was a great purchase. A now with
more and more embedded boards coming with a SATA controller...&lt;/p&gt;&lt;/div&gt;</description><category>storage</category><guid>https://fabioutzig.com/posts/cheap-chinese-ssds/</guid><pubDate>Mon, 29 Apr 2013 03:00:00 GMT</pubDate></item><item><title>Arrow and cryptographic protocols</title><link>https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/</link><dc:creator>Fabio Utzig</dc:creator><description>&lt;div&gt;&lt;p&gt;This weekend I spent a lot of time watching &lt;a class="reference external" href="http://www.imdb.com/title/tt2193021/?ref_=sr_1"&gt;Arrow&lt;/a&gt;.
I started watching it last year but then lost interest and now decided to
get up to speed. I watched episodes 11 to 19 (most recent). It actually
got quite good.&lt;/p&gt;
&lt;p&gt;The first 10 or so episodes are kind of self-contained. It's
like watching &lt;em&gt;Law and Order&lt;/em&gt; were you can watch any episode and you don't
loose much. The exception are the flashbacks where the story of Oliver
Queen during the five years he spent as a castaway on an chinese Island and
was considered dead are told. Btw, the name Green Arrow was never used in
the series. The vigilante's name in the series is &lt;strong&gt;The Hood&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;But from episode 12 and forward the story gets more serialized so that
every episode is a continuation of the previous one.&lt;/p&gt;
&lt;p&gt;Although I'm liking the series, there are so many annoyances that requires
you to develop new levels of &lt;em&gt;suspension of disbelief&lt;/em&gt;. Let me be clear:
I have no problem with super-heroes.
But there are no super-heroes in Arrow. There are only
heroes that are all normal people (with special training, of course). But than
you see every hero and villain killing many bandits, police offices and FBI
agents armed with machine guns using only rudimentary weapons like bow and
arrow or throwing knives... I roll my eyes everytime...&lt;/p&gt;
&lt;p&gt;The best parts of the show are the ones told in flashbacks which tell the
story of Oliver Queen after a shipwreck and his years living with &lt;em&gt;soldiers&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;But the real reason for me to write this post is to mention about the computer
related scenes. Oh gosh... they are so bad that they are funny. One scene really
deserves special mention. It's on episode 11 and &lt;a class="reference external" href="http://arrow.wikia.com/wiki/Felicity_Smoak"&gt;Felicity Smoak&lt;/a&gt; is hacking a pen
drive and then what follows is this screen of code:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-1"&gt; 1&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-2"&gt; 2&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-3"&gt; 3&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-4"&gt; 4&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-5"&gt; 5&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-6"&gt; 6&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-7"&gt; 7&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-8"&gt; 8&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-9"&gt; 9&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-10"&gt;10&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-11"&gt;11&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-12"&gt;12&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-13"&gt;13&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-14"&gt;14&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-15"&gt;15&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-16"&gt;16&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-17"&gt;17&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-18"&gt;18&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-19"&gt;19&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-20"&gt;20&lt;/a&gt;
&lt;a href="https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/#rest_code_896b63945e9443b2b239879807bfc39b-21"&gt;21&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code cpp"&gt;&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-1"&gt;&lt;/a&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-3"&gt;&lt;/a&gt;       &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-4"&gt;&lt;/a&gt;          &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-5"&gt;&lt;/a&gt;          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'j'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'J'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-6"&gt;&lt;/a&gt;             &lt;span class="n"&gt;julian&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-7"&gt;&lt;/a&gt;             &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-8"&gt;&lt;/a&gt;          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'q'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'Q'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-9"&gt;&lt;/a&gt;             &lt;span class="n"&gt;quiet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-10"&gt;&lt;/a&gt;             &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-11"&gt;&lt;/a&gt;          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'s'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'S'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-12"&gt;&lt;/a&gt;             &lt;span class="n"&gt;sat_no&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-13"&gt;&lt;/a&gt;             &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-14"&gt;&lt;/a&gt;          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'d'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-15"&gt;&lt;/a&gt;             &lt;span class="n"&gt;n_days&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-16"&gt;&lt;/a&gt;             &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-17"&gt;&lt;/a&gt;          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'f'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'F'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-18"&gt;&lt;/a&gt;             &lt;span class="n"&gt;ofile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"wb"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-19"&gt;&lt;/a&gt;             &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-20"&gt;&lt;/a&gt;          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'r'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'R'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_896b63945e9443b2b239879807bfc39b-21"&gt;&lt;/a&gt;             &lt;span class="n"&gt;data_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"ab"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;And then she describes it as: &lt;strong&gt;Military grade cryptographic security protocol&lt;/strong&gt;!!!&lt;/p&gt;
&lt;img alt="/images/laugh.jpg" src="https://fabioutzig.com/images/laugh.jpg"&gt;
&lt;p&gt;The code seems to come from this file:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://bitbucket.org/nloadholtes/lunar/src/fd2d71716eda/jevent.cpp"&gt;https://bitbucket.org/nloadholtes/lunar/src/fd2d71716eda/jevent.cpp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also funny was that the screens of code load slowly like if running on very
old computers... Go watch it on youtube:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.youtube.com/watch?v=o-7ypLaVxsw#t=0m50s"&gt;Felicity Smoak and security lesson!?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Btw, every single people on the show uses Nokia Lumia's and LeNovo computers running
Windows 8... go figure!&lt;/p&gt;&lt;/div&gt;</description><category>crypto</category><category>tv-series</category><guid>https://fabioutzig.com/posts/arrow-and-cryptographic-protocols/</guid><pubDate>Sun, 21 Apr 2013 03:00:00 GMT</pubDate></item><item><title>Running Bootcamp Linux on Parallels</title><link>https://fabioutzig.com/posts/running-bootcamp-linux-on-parallels/</link><dc:creator>Fabio Utzig</dc:creator><description>&lt;div&gt;&lt;p&gt;Some weeks after I bought my MacBook Pro about two years ago I decided
that I needed to run both Mac OS X, Windows and Linux on it so at the time
I upgraded the original HDD to a Seagate 7200rpm 750GB disk.&lt;/p&gt;
&lt;p&gt;I installed both Windows 7 and Linux as Bootcamp partitions. Bootcamp
for Mac basically does BIOS emulation and enables you to use old style MBR
partitions for booting operating systems (and some other things too). Mac OS X
uses EFI and GPT.&lt;/p&gt;
&lt;p&gt;I use &lt;a class="reference external" href="http://refit.sourceforge.net/"&gt;rEFIt&lt;/a&gt; to triple boot my system. It displays an operating system
chooser at startup with fancy graphics and also maintains consistency between
GPT and MBR partitions.&lt;/p&gt;
&lt;p&gt;But the problem is that it sucks having to reboot everytime you have to run
a program on another operating system!&lt;/p&gt;
&lt;p&gt;For Windows, I've been running it on &lt;a class="reference external" href="http://www.parallels.com/"&gt;Parallels Desktop&lt;/a&gt; as well as native. Parallels
does some fancy integration enabling Windows programs to run on Mac OS X screen
and works as Mac programs, including clipboard integration and such.&lt;/p&gt;
&lt;p&gt;So my objective was to run Linux on Parallels as well is runs Windows. For
Windows you just have to create a new VM using a Bootcamp partition and
Parallels takes care of all configurations and everything is done automatically.
For Linux you have to do pretty much everything manually. Almost everything
is standard VM configuration and straightforward for those used to running VM
software. The hardest part is making the hard disk emulation run from a native
partition.&lt;/p&gt;
&lt;p&gt;So I started adding the machine's disk, enumeration and selected the partition
using the GUI. But when I started the machine it hanged with error: &lt;em&gt;missing
operating system&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Looking into the internals of a Parallels VM, there is one directory for each
created VM. For Linux it was located in:&lt;/p&gt;
&lt;blockquote&gt;
/Users/utzig/Documents/Parallels/Arch Linux.pvm/ST9750420AS (disk0).hdd/&lt;/blockquote&gt;
&lt;p&gt;The contents were basically these (with some extra backups, etc):&lt;/p&gt;
&lt;blockquote&gt;
DiskDescriptor.xml
PhysicalGpt.hds
PhysicalMbr.hds&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;DiskDescriptor&lt;/em&gt;'s contents seemed right. I tried comparing the _hds_ files
to the Windows VM's counterparts and they were equal. And here's the catch.
Those who remember the old days of _DOS_ will probably remember that there
was only one MBR partition that could boot a system. The partition set as
bootable. So this was the main problem, I had created the Linux VM having my
Windows partition as bootable!&lt;/p&gt;
&lt;p&gt;So I removed again the hard disk from the Linux VM in Parallels and then
changed the bootable partition on the command line. To do that on Mac OS X,
open the terminal and run:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_16ec40a4d763448e97c708a7c9f7d60a-1"&gt;&lt;/a&gt;$ sudo fdisk -e /dev/rdisk0
&lt;a name="rest_code_16ec40a4d763448e97c708a7c9f7d60a-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_16ec40a4d763448e97c708a7c9f7d60a-3"&gt;&lt;/a&gt;fdisk: 1&amp;gt; p
&lt;a name="rest_code_16ec40a4d763448e97c708a7c9f7d60a-4"&gt;&lt;/a&gt;Disk: /dev/rdisk0   geometry: 91201/255/63 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1465149168&lt;/span&gt; sectors&lt;span class="o"&gt;]&lt;/span&gt;
&lt;a name="rest_code_16ec40a4d763448e97c708a7c9f7d60a-5"&gt;&lt;/a&gt;Offset: &lt;span class="m"&gt;0&lt;/span&gt;   Signature: 0xAA55
&lt;a name="rest_code_16ec40a4d763448e97c708a7c9f7d60a-6"&gt;&lt;/a&gt;         Starting       Ending
&lt;a name="rest_code_16ec40a4d763448e97c708a7c9f7d60a-7"&gt;&lt;/a&gt; &lt;span class="c1"&gt;#: id  cyl  hd sec -  cyl  hd sec [     start -       size]&lt;/span&gt;
&lt;a name="rest_code_16ec40a4d763448e97c708a7c9f7d60a-8"&gt;&lt;/a&gt;------------------------------------------------------------------------
&lt;a name="rest_code_16ec40a4d763448e97c708a7c9f7d60a-9"&gt;&lt;/a&gt; 1: EE &lt;span class="m"&gt;1023&lt;/span&gt; &lt;span class="m"&gt;254&lt;/span&gt;  &lt;span class="m"&gt;63&lt;/span&gt; - &lt;span class="m"&gt;1023&lt;/span&gt; &lt;span class="m"&gt;254&lt;/span&gt;  &lt;span class="m"&gt;63&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt; -     409639&lt;span class="o"&gt;]&lt;/span&gt; &amp;lt;Unknown ID&amp;gt;
&lt;a name="rest_code_16ec40a4d763448e97c708a7c9f7d60a-10"&gt;&lt;/a&gt; 2: AF &lt;span class="m"&gt;1023&lt;/span&gt; &lt;span class="m"&gt;254&lt;/span&gt;  &lt;span class="m"&gt;63&lt;/span&gt; - &lt;span class="m"&gt;1023&lt;/span&gt; &lt;span class="m"&gt;254&lt;/span&gt;  &lt;span class="m"&gt;63&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;    &lt;span class="m"&gt;409640&lt;/span&gt; -  997771856&lt;span class="o"&gt;]&lt;/span&gt; HFS+
&lt;a name="rest_code_16ec40a4d763448e97c708a7c9f7d60a-11"&gt;&lt;/a&gt; 3: &lt;span class="m"&gt;07&lt;/span&gt; &lt;span class="m"&gt;1023&lt;/span&gt; &lt;span class="m"&gt;254&lt;/span&gt;  &lt;span class="m"&gt;63&lt;/span&gt; - &lt;span class="m"&gt;1023&lt;/span&gt; &lt;span class="m"&gt;254&lt;/span&gt;  &lt;span class="m"&gt;63&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;998445056&lt;/span&gt; -  230230016&lt;span class="o"&gt;]&lt;/span&gt; HPFS/QNX/AUX
&lt;a name="rest_code_16ec40a4d763448e97c708a7c9f7d60a-12"&gt;&lt;/a&gt;*4: &lt;span class="m"&gt;83&lt;/span&gt; &lt;span class="m"&gt;1023&lt;/span&gt; &lt;span class="m"&gt;254&lt;/span&gt;  &lt;span class="m"&gt;63&lt;/span&gt; - &lt;span class="m"&gt;1023&lt;/span&gt; &lt;span class="m"&gt;254&lt;/span&gt;  &lt;span class="m"&gt;63&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1228675072&lt;/span&gt; -  236211912&lt;span class="o"&gt;]&lt;/span&gt; Linux files*
&lt;a name="rest_code_16ec40a4d763448e97c708a7c9f7d60a-13"&gt;&lt;/a&gt;fdisk: 1&amp;gt;
&lt;/pre&gt;&lt;p&gt;The necessary commands to know here are: &lt;strong&gt;p&lt;/strong&gt; to print the partition table, &lt;strong&gt;f&lt;/strong&gt;
to set the bootable partition and &lt;strong&gt;quit&lt;/strong&gt; to quit saving. So by running &lt;strong&gt;f 4&lt;/strong&gt; I set
the Linux partition to bootable which is shown by the &lt;strong&gt;star&lt;/strong&gt; symbols enclosing
the line.&lt;/p&gt;
&lt;p&gt;Then I re-added the hard disk to the Linux VM which this time booted to GRUB.
Linux hanged because it couldn't find the root partition. After some fiddling
I found that I had to add the line:&lt;/p&gt;
&lt;blockquote&gt;
MODULES="ahci libahci sd_mod"&lt;/blockquote&gt;
&lt;p&gt;to &lt;em&gt;/etc/mkinitcpio.conf&lt;/em&gt; and re-create the initramfs image. That does make some
sense but I don't know exaclty why it would work without it when booting native.&lt;/p&gt;
&lt;p&gt;After being able to get to the Linux console I spent some time cleaning up to
run on a VM.&lt;/p&gt;
&lt;p&gt;But the funny part really comes when configuring Linux's graphic programs to
run on Mac OS X kinda like Parallels does for Windows with Coherence. For Linux
it relies on X11 and since Mac OS X already has &lt;strong&gt;X11.app&lt;/strong&gt; or you can also run
&lt;a class="reference external" href="http://xquartz.macosforge.org/landing/"&gt;XQuartz&lt;/a&gt; (which I do), I could enable Linux apps to present on Mac OS X. For
that I used SSH X11 forwarding. By editing &lt;em&gt;/etc/ssh/sshd_config&lt;/em&gt; on Linux and
changing the following configurations:&lt;/p&gt;
&lt;blockquote&gt;
X11Forwarding yes
X11DisplayOffset 10
X11UseLocalhost yes&lt;/blockquote&gt;
&lt;p&gt;After restarting &lt;em&gt;sshd&lt;/em&gt; now I can ssh to my Linux VM&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_c30c8848dc16490789875703df38a713-1"&gt;&lt;/a&gt;$ ssh -Y 10.211.55.4
&lt;/pre&gt;&lt;p&gt;It should already export the correct &lt;em&gt;$DISPLAY&lt;/em&gt; env variable with a value
that mirrors the &lt;em&gt;X11DisplayOffset&lt;/em&gt; from sshd_config. If not just configure
it manually:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_6e05eaf90a7649bb9f3093f1e34a3b1d-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;DISPLAY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;localhost:10.0
&lt;/pre&gt;&lt;p&gt;And the try running:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_c7ddf8f25d2c4e85aaa37793070bea65-1"&gt;&lt;/a&gt;$ xeyes
&lt;/pre&gt;&lt;p&gt;If everything works alright &lt;em&gt;xeyes&lt;/em&gt; should now be running on you Mac OS X!&lt;/p&gt;
&lt;p&gt;The really useful part is running applications that don't have a Mac OS X
port like, for example, &lt;a class="reference external" href="http://www.xilinx.com/products/design-tools/ise-design-suite/ise-webpack.htm"&gt;Xilinx ISE WebPACK&lt;/a&gt;. So here a screenshot of ISE
running on Mac OS X and synthesizing the &lt;em&gt;pong&lt;/em&gt; example!&lt;/p&gt;
&lt;img alt="/images/xilinx_ise_mac.jpg" src="https://fabioutzig.com/images/xilinx_ise_mac.jpg"&gt;&lt;/div&gt;</description><category>linux</category><category>mac</category><category>virtualization</category><category>vm</category><guid>https://fabioutzig.com/posts/running-bootcamp-linux-on-parallels/</guid><pubDate>Sun, 07 Apr 2013 03:00:00 GMT</pubDate></item><item><title>TCP/IP on an AVR microcontroller</title><link>https://fabioutzig.com/posts/tcpip-on-an-avr/</link><dc:creator>Fabio Utzig</dc:creator><description>&lt;div&gt;&lt;p&gt;Last week I was going through some boards I bought last year which ended up
on some pile of electronics trash here and I found this very cheap Microchip
ENC28J60 based Ethernet to SPI bridge adapter and thought it would be cool
to use it for something.&lt;/p&gt;
&lt;p&gt;This little board can be bought on &lt;a class="reference external" href="http://www.aliexpress.com/"&gt;Aliexpress&lt;/a&gt; for a price close to US$ 5 or 6.&lt;/p&gt;
&lt;p&gt;Here the product's website: &lt;a class="reference external" href="http://www.lctech-inc.com/Hardware/Detail.aspx?id=588fbc2e-ecc1-4013-ac35-69bc83bda1fb"&gt;ENC28J60 Network Module&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I ended up choosing to use and Seeeduino Mega (Arduino Clone) to run the
tcp/ip stack and wrote the remaining software myself. I started with one of
my preferred RTOS's, &lt;a class="reference external" href="http://www.chibios.org/"&gt;ChibiOS/RT&lt;/a&gt; which already has
a demo for Arduino based boards, thanks to yours truly!&lt;/p&gt;
&lt;p&gt;Since there is no SPI driver for AVR based microcontrollers, I ended writing one
myself (and contributing back). That was the easiest part, I guess.&lt;/p&gt;
&lt;p&gt;After that I created the demo based on an existing uIP (a lightweight TCP/IP
stack) demo already available on mainstream ChibiOS/RT but tailoring (or stripping
it down) for the AVR.&lt;/p&gt;
&lt;p&gt;Since the microcontroller has only 8K for RAM I had to remove the webserver from
the demo and enabled the hello world app from uIP which is basically just a
listening socket that has functionality similar to an echo server.&lt;/p&gt;
&lt;p&gt;The hard part was writing the ENC28J60 driver. I started using a driver from the
&lt;a class="reference external" href="https://github.com/jcw/ethercard"&gt;EtherCard&lt;/a&gt; project and &lt;em&gt;porting&lt;/em&gt; it to ChibiOS/RT.&lt;/p&gt;
&lt;p&gt;After some days of debugging and quite some time lost because I was using
a SPI clock (8MHz) which made communication between the Arduino and ENC28J60 unreliable
(although far from the limits of the ENC28J60 chip itself which are 20MHz),
I finally got to the stage of working &lt;em&gt;ping&lt;/em&gt; now.&lt;/p&gt;
&lt;p&gt;Ping itself is taking currently takes around 4.5 ms on a cross-over cable which is
ok, I guess. Sometimes it doesn't work which sucks. The issue is probably with
buffers...&lt;/p&gt;
&lt;p&gt;From now on things should get a lot easier and probably very soon this will be
production ready.&lt;/p&gt;
&lt;p&gt;Finally a photo of my current setup!&lt;/p&gt;
&lt;img alt="/images/arduino_enc28j60.jpg" src="https://fabioutzig.com/images/arduino_enc28j60.jpg"&gt;
&lt;p&gt;The project sources are available for those courageous and crazy enough:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/utzig/chibios-avr-enc28j60-demo"&gt;https://github.com/utzig/chibios-avr-enc28j60-demo&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>arduino</category><category>avr</category><category>chibios</category><category>enc28j60</category><guid>https://fabioutzig.com/posts/tcpip-on-an-avr/</guid><pubDate>Tue, 26 Mar 2013 03:00:00 GMT</pubDate></item><item><title>Asus 1025c</title><link>https://fabioutzig.com/posts/asus-1025c-review/</link><dc:creator>Fabio Utzig</dc:creator><description>&lt;div&gt;&lt;p&gt;Last November I did not resist the temptation and bought a Netbook.
For some time I had been wishing to buy a &lt;strong&gt;very portable&lt;/strong&gt; computer
that could be carried anywhere without much effort. I'd been keep an eye on
the Asus 1025c for a few months due to its relatively well powered
processor (for an Atom, obviously) and low-price.&lt;/p&gt;
&lt;p&gt;So, on Black Friday, the day of making new debts, which we proudly copied
from the Yankees, although ours is a kinda watered down version, I saw it
for 75% of the normal price and voilá, here it is.&lt;/p&gt;
&lt;p&gt;The specs of this &lt;strong&gt;beast&lt;/strong&gt; are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Atom N2600 1.6GHz&lt;/li&gt;
&lt;li&gt;2GB RAM&lt;/li&gt;
&lt;li&gt;320GB HDD&lt;/li&gt;
&lt;li&gt;10" screen&lt;/li&gt;
&lt;li&gt;Atheros AR9485 WiFi&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It came with Windows 7 Starter so guess what's the first thing to do? Not
hard, huh.&lt;/p&gt;
&lt;p&gt;I ended up installing Linux (Arch), FreeBSD and NetBSD. Despite the quite
new hardware every OS works fairly well. Linux had a lot of problems
with the WiFi chip initially but in the latest kernel versions it works
really well.&lt;/p&gt;
&lt;p&gt;The low-point has been the video support. For the N2x00 Atom family, Intel
decided to license the PowerVR SGX 545 core from Imagination Technologies.
So basically there's no 2D and 3D acceleration. Intel even released a closed
source driver which require some old versions of many packages which there's
no way to use with a rolling release like Arch Linux.&lt;/p&gt;
&lt;p&gt;In general I'm impressed with the performance of the machine. It's not close
to a Core i5/7 but it's better than I expected. As long as the quad-core is
exploited with things like &lt;em&gt;make -j4&lt;/em&gt; it is good to go. The two main problems
with system limitations were: running Eclipse for anything; and synthesizing
VHDL/Verilog designs. The Xilinx tools take a really long time to synthesize
anything. But they are slow even on an i5 anyway!&lt;/p&gt;&lt;/div&gt;</description><category>netbook</category><guid>https://fabioutzig.com/posts/asus-1025c-review/</guid><pubDate>Thu, 21 Feb 2013 03:00:00 GMT</pubDate></item></channel></rss>