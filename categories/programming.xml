<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Fabio Utzig (programming)</title><link>https://fabioutzig.com/</link><description></description><atom:link href="https://fabioutzig.com/categories/programming.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Tue, 19 Jul 2016 00:29:26 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Table-driven state machines</title><link>https://fabioutzig.com/posts/table-driven-state-machines/</link><dc:creator>Fabio Utzig</dc:creator><description>&lt;div&gt;&lt;p&gt;Some weeks ago I was writing a protocol stack for a serial RFID reader for
a commercial project I'm working on. Apart from one command, all the others
are standard serial communication where you send a fixed data structure and
receive a fixed data structure. But there's this command that does inventory,
which means, get all the RFID &lt;em&gt;tags&lt;/em&gt; in the area. You request the data and it
starts sending many different packets for each &lt;em&gt;tag&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The response format and size can vary but it always starts with a fixed
header which can be "RITM", "BITM", "EITM" or "IITM". So I basically wrote
a state machine do wait for one of these possible headers to start reading
the remaining data (size depends on the header type).&lt;/p&gt;
&lt;p&gt;To make it easier I draw the following flowchart:&lt;/p&gt;
&lt;img alt="/images/rfid_header_sm.jpg" src="https://fabioutzig.com/images/rfid_header_sm.jpg"&gt;
&lt;p&gt;I guess not many people will be impressed by my great drawing skills! Btw,
if anyone can suggest me a good flow charting software for free or low-cost
I'd be thankful.&lt;/p&gt;
&lt;p&gt;The only missing edges on this diagram are the ones that connect
all states back to state &lt;em&gt;S0&lt;/em&gt; when an invalid character is received.&lt;/p&gt;
&lt;div class="section" id="rudimentary-state-machine-code"&gt;
&lt;h2&gt;Rudimentary state machine code&lt;/h2&gt;
&lt;p&gt;The code I initially wrote to solve the problem is shown below:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-1"&gt;&lt;/a&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-2"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-3"&gt;&lt;/a&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-4"&gt;&lt;/a&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-6"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define S0 0&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-7"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define S1 1&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-8"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define S2 2&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-9"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define S3 3&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-10"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define S4 4&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-12"&gt;&lt;/a&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-13"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-16"&gt;&lt;/a&gt;    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-17"&gt;&lt;/a&gt;        &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serial_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-18"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-20"&gt;&lt;/a&gt;        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-21"&gt;&lt;/a&gt;        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-22"&gt;&lt;/a&gt;            &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-23"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isvalid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-24"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-25"&gt;&lt;/a&gt;                &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-26"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-27"&gt;&lt;/a&gt;                &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-28"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-29"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-30"&gt;&lt;/a&gt;        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-31"&gt;&lt;/a&gt;            &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-32"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'I'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-33"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-34"&gt;&lt;/a&gt;                &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-35"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isvalid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-36"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-37"&gt;&lt;/a&gt;                &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-38"&gt;&lt;/a&gt;                &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-39"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-40"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-41"&gt;&lt;/a&gt;                &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-42"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-43"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-44"&gt;&lt;/a&gt;        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-45"&gt;&lt;/a&gt;            &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-46"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'T'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-47"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-48"&gt;&lt;/a&gt;                &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-49"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isvalid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-50"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-51"&gt;&lt;/a&gt;                &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-52"&gt;&lt;/a&gt;                &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-53"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-54"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-55"&gt;&lt;/a&gt;                &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-56"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-57"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-58"&gt;&lt;/a&gt;        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-59"&gt;&lt;/a&gt;            &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-60"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'M'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-61"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-62"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isvalid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-63"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-64"&gt;&lt;/a&gt;                &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-65"&gt;&lt;/a&gt;                &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-66"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-67"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-68"&gt;&lt;/a&gt;                &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-69"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-70"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-71"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-72"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_eeb3c08f09be426e93067a4359088bf0-73"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The function &lt;em&gt;isvalid&lt;/em&gt; tests if the character received is a valid
starting character for the header strings know.&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_ea8297b0b12a4e21ba904a7ddbbd694e-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="nf"&gt;isvalid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ea8297b0b12a4e21ba904a7ddbbd694e-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ea8297b0b12a4e21ba904a7ddbbd694e-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'R'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'B'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'E'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'I'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_ea8297b0b12a4e21ba904a7ddbbd694e-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;It worked as expect but it should be clear that it's messy and has a spaghetti
structure which could quickly grow into unmaintainable code. The problem
is having a &lt;em&gt;case&lt;/em&gt; for each state and inside it a nested if/elseif test for
the received character.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="towards-a-better-state-machine-structure"&gt;
&lt;h2&gt;Towards a better state machine structure&lt;/h2&gt;
&lt;p&gt;While reading &lt;a href="http://www.amazon.com/dp/1556220782/?tag=utzig-20" target="_blank"&gt;Programming Game AI by Example&lt;/a&gt; (great book!)
I stumbled across some designs for state machines and in particular one
table-driven which doesn't require object orientation and polymorphism. Although
the book only gives a rough example, it is clear enough. I previously saw a very
similar approach used in lexers where a given input regular expression generates
a table-driven state machine.&lt;/p&gt;
&lt;p&gt;To get started the first thing I did was to define a &lt;em&gt;struct&lt;/em&gt; to accomodate the
necessary data. Here's how it looks:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_1adef2a098024339aea1e7a562ec4495-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;
&lt;a name="rest_code_1adef2a098024339aea1e7a562ec4495-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_1adef2a098024339aea1e7a562ec4495-3"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;int8_t&lt;/span&gt; &lt;span class="n"&gt;cur_state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_1adef2a098024339aea1e7a562ec4495-4"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_1adef2a098024339aea1e7a562ec4495-5"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;int8_t&lt;/span&gt; &lt;span class="n"&gt;next_state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_1adef2a098024339aea1e7a562ec4495-6"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_1adef2a098024339aea1e7a562ec4495-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;transition_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Basically to decide the new state what is used is a current state and the last
character received. But using the last character directly has many drawbacks
so I decided to use a function (&lt;em&gt;valid&lt;/em&gt;) to decide the next state. The &lt;em&gt;index&lt;/em&gt;
variable is custom data I need to get the position where the character will
be inserted in the input buffer. This is not really part of the state machine.&lt;/p&gt;
&lt;p&gt;Here's what the declaration of the final state machine looks like:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define S0 0&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define S1 1&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-3"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define S2 2&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-4"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define S3 3&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-5"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define S4 4&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;transition_t&lt;/span&gt; &lt;span class="n"&gt;trs&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-8"&gt;&lt;/a&gt;    &lt;span class="cm"&gt;/* STATE 0 */&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-9"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="n"&gt;initial_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-10"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="n"&gt;_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-11"&gt;&lt;/a&gt;    &lt;span class="cm"&gt;/* STATE 1 */&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-12"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;         &lt;span class="n"&gt;I_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-13"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="n"&gt;initial_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-14"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="n"&gt;_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-15"&gt;&lt;/a&gt;    &lt;span class="cm"&gt;/* STATE 2 */&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-16"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;         &lt;span class="n"&gt;T_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-17"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="n"&gt;initial_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-18"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;         &lt;span class="n"&gt;_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-19"&gt;&lt;/a&gt;    &lt;span class="cm"&gt;/* STATE 3 */&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-20"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;         &lt;span class="n"&gt;M_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-21"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="n"&gt;initial_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-22"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;         &lt;span class="n"&gt;_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-23"&gt;&lt;/a&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_b2a299d66a104f999b466a55d6d40200-25"&gt;&lt;/a&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;trs_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The element in the second column is a function which will evaluate if this is
the valid row. For example, when in state &lt;em&gt;S1&lt;/em&gt; if &lt;em&gt;I_char&lt;/em&gt; returns
&lt;em&gt;true&lt;/em&gt; (by &lt;em&gt;C's&lt;/em&gt; definition) then it goes to state &lt;em&gt;S2&lt;/em&gt;. Else if
&lt;em&gt;initial_char&lt;/em&gt; returns &lt;em&gt;true&lt;/em&gt; it stays in state &lt;em&gt;S1&lt;/em&gt;. The function &lt;em&gt;_true&lt;/em&gt;
always returns a &lt;em&gt;true&lt;/em&gt; value.&lt;/p&gt;
&lt;p&gt;The order of the row declarations is important because they are tested
from the starting row towards the ending row.&lt;/p&gt;
&lt;p&gt;The variable &lt;em&gt;trs_size&lt;/em&gt; is the number of elements in the state machine
description used in the main algorithm to iterate over all elements.&lt;/p&gt;
&lt;p&gt;These are the definitions of the fuctions used in the declaration of the
state machine:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_15f7caa827cb41e5843291d074912867-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="nf"&gt;initial_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_15f7caa827cb41e5843291d074912867-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_15f7caa827cb41e5843291d074912867-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;'R'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;'B'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;'E'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;'I'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_15f7caa827cb41e5843291d074912867-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_15f7caa827cb41e5843291d074912867-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="nf"&gt;I_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'I'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_15f7caa827cb41e5843291d074912867-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="nf"&gt;T_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'T'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_15f7caa827cb41e5843291d074912867-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="nf"&gt;M_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'M'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_15f7caa827cb41e5843291d074912867-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="nf"&gt;_true&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The function &lt;em&gt;initial_char&lt;/em&gt; returns &lt;em&gt;true&lt;/em&gt; if any of the characters
valid to initiate a header is found. There is also one function for each of
the extra possible characters. &lt;em&gt;_true&lt;/em&gt; always returns &lt;em&gt;1&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And here is the final state machine code!&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-1"&gt;&lt;/a&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serial_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;trs_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;trs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;cur_state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-8"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-9"&gt;&lt;/a&gt;                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;trs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;next_state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-10"&gt;&lt;/a&gt;                &lt;span class="n"&gt;rxbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;trs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-11"&gt;&lt;/a&gt;                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-12"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-13"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-14"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_ac10119522494f16bc8e8bccac30c638-15"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;In the end the code is actually bigger and probably less efficient. But
it should be a lot easier to maintain. If I copy/paste it on another
project I will only need to modify the state machine array declaration
(and probably also the custom data).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="things-that-could-be-made-better"&gt;
&lt;h2&gt;Things that could be made better&lt;/h2&gt;
&lt;p&gt;The is (at least) one thing which could be made better in the newer code.
Look at these function definitions below:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_c1e127cf270d449fbd1380ad33a96b9a-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="nf"&gt;I_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'I'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_c1e127cf270d449fbd1380ad33a96b9a-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="nf"&gt;T_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'T'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_c1e127cf270d449fbd1380ad33a96b9a-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="nf"&gt;M_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'M'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;As it must be quite obvious, they all look pretty much the same. Only the
character tested changes. There should be a way of fixing this with
preprocessor macros. I have in mind something like this:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_92942ce6a3754489844125c691c9b8d2-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define CHAR_FUN(c) static uint8_t c##_char(char ch) { return (ch == '##c##'); }&lt;/span&gt;
&lt;a name="rest_code_92942ce6a3754489844125c691c9b8d2-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_92942ce6a3754489844125c691c9b8d2-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;CHAR_FUN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_92942ce6a3754489844125c691c9b8d2-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;CHAR_FUN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_92942ce6a3754489844125c691c9b8d2-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;CHAR_FUN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The problem in this code is that &lt;em&gt;preprocessor's&lt;/em&gt; concatenation doesn't work
inside single quotes. So it generates the correct function name but the test
will look like &lt;em&gt;ch == '##c##'&lt;/em&gt; instead of the correct character.&lt;/p&gt;
&lt;p&gt;I'm not sure yet of how to do it but I'll keep trying!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update-22-jun-2013"&gt;
&lt;h2&gt;UPDATE (22 Jun 2013)&lt;/h2&gt;
&lt;p&gt;I just found a way of solving the problem above using &lt;em&gt;stringification&lt;/em&gt; as
provided by the preprocessor. Not great but it does the job.&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_2172a71360a842e3b4dd4fd0e0e0120a-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define CHAR_FUN(c) static uint8_t c##_char(char ch){char *s=#c;return(ch==s[0]);}&lt;/span&gt;
&lt;a name="rest_code_2172a71360a842e3b4dd4fd0e0e0120a-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;CHAR_FUN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_2172a71360a842e3b4dd4fd0e0e0120a-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;CHAR_FUN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_2172a71360a842e3b4dd4fd0e0e0120a-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;CHAR_FUN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>c</category><category>programming</category><guid>https://fabioutzig.com/posts/table-driven-state-machines/</guid><pubDate>Fri, 21 Jun 2013 03:00:00 GMT</pubDate></item></channel></rss>